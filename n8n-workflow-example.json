{
  "name": "QuoteMaster Pro - Envio de Cotações (v2)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "quote-sender",
        "responseMode": "responseNode"
      },
      "id": "webhook-start",
      "name": "Webhook Cotações",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [200, 300]
    },
    {
      "parameters": {
        "functionCode": "// Normaliza payloads diversos em estrutura canônica { quote, client, suppliers[], settings, template_data }\nconst inItem = (items && items[0] && items[0].json) ? items[0].json : {};\n\nconst out = { ...inItem };\n\n// Normaliza quote e itens\nconst quote = out.quote || out.rfq || {};\nconst itemsCandidates = [\n  Array.isArray(quote.items) ? quote.items : null,\n  Array.isArray(out.items) ? out.items : null,\n  Array.isArray(out.quote_items) ? out.quote_items : null,\n  Array.isArray(out.template_data?.items) ? out.template_data.items : null,\n].filter(Boolean);\nquote.items = itemsCandidates[0] || [];\nout.quote = quote;\n\n// Normaliza cliente\nout.client = out.client || out.client_info || out.organization || null;\n\n// Normaliza fornecedores\nlet suppliers = Array.isArray(out.suppliers) ? out.suppliers : null;\nif (!suppliers && out.supplier) suppliers = [out.supplier];\nif (!suppliers) {\n  const emails = out.supplier_emails || out.recipients?.emails || [];\n  const whats = out.supplier_whatsapps || out.recipients?.whatsapps || [];\n  const set = new Set();\n  emails.forEach(e => e && set.add(`email:${e}`));\n  whats.forEach(w => w && set.add(`wa:${w}`));\n  suppliers = Array.from(set).map((key, idx) => {\n    const [type, value] = key.split(':');\n    return { id: `anon-${idx}`, name: 'Fornecedor', email: type === 'email' ? value : null, whatsapp: type === 'wa' ? value : null, phone: type === 'wa' ? value : null };\n  });\n}\nout.suppliers = suppliers || [];\n\n// Normaliza settings\nout.settings = {\n  send_email: Boolean(out.settings?.send_email ?? out.send_email ?? false),\n  send_whatsapp: Boolean(out.settings?.send_whatsapp ?? out.send_whatsapp ?? true),\n  custom_message: out.settings?.custom_message ?? out.custom_message ?? null,\n  evolution: out.settings?.evolution ?? out.evolution ?? null,\n  email: out.settings?.email ?? { from: out.email_from || null }\n};\n\nreturn [{ json: out }];"
      },
      "id": "normalize",
      "name": "Normalizar Entrada",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [420, 300]
    },
    {
      "parameters": {
        "functionCode": "// Expande os fornecedores para múltiplos itens para processamento paralelo\n// Entrada esperada do Webhook: { quote, client, suppliers: [...], settings, template_data }\nconst inItem = items[0].json;\n\nif (!inItem.suppliers || !Array.isArray(inItem.suppliers) || inItem.suppliers.length === 0) {\n  return items;\n}\n\nconst out = inItem.suppliers.map((supplier) => ({\n  json: {\n    supplier,\n    quote: inItem.quote,\n    client: inItem.client,\n    settings: inItem.settings || {},\n    template_data: inItem.template_data || null\n  }\n}));\n\nreturn out;"
      },
      "id": "expand-suppliers",
      "name": "Expandir Fornecedores",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [640, 300]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.settings.send_email }}",
              "value2": true
            }
          ]
        }
      },
      "id": "if-email",
      "name": "Enviar E-mail?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [860, 180]
    },
    {
      "parameters": {
        "functionCode": "const { quote, client, supplier, settings } = $json;\n\nconst money = (v) => { try { return (new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' })).format(Number(v||0)); } catch { return `R$ ${(Number(v||0)).toFixed(2)}`; } };\nconst dateBr = (d) => { return d ? new Date(d).toLocaleString('pt-BR') : 'A definir'; };\n\nconst html = `\n<div style=\"font-family: Arial, sans-serif; max-width: 640px; margin: 0 auto;\">\n  <h2 style=\"color:#003366;\">🏢 Nova Cotação Disponível</h2>\n  <div style=\"background:#f6f8fa; padding:16px; border-radius:8px; margin:12px 0;\">\n    <p><strong>📋 Cotação:</strong> ${quote.title}</p>\n    <p><strong>🆔 ID:</strong> ${quote.id}</p>\n    <p><strong>💰 Total Estimado:</strong> ${money(quote.total)}</p>\n    <p><strong>📅 Prazo:</strong> ${dateBr(quote.deadline)}</p>\n    <p><strong>👤 Cliente:</strong> ${client.name}</p>\n    <p><strong>📧 E-mail:</strong> ${client.email || '—'}</p>\n    ${client.phone ? `<p><strong>📱 Telefone:</strong> ${client.phone}</p>` : ''}\n  </div>\n  <h3 style=\"color:#003366;\">📦 Itens (${(quote.items||[]).length})</h3>\n  <table style=\"width:100%; border-collapse: collapse;\">\n    <thead>\n      <tr style=\"background:#003366; color:#fff;\">\n        <th style=\"padding:8px; border:1px solid #ddd; text-align:left;\">Produto</th>\n        <th style=\"padding:8px; border:1px solid #ddd; text-align:center;\">Qtd</th>\n        <th style=\"padding:8px; border:1px solid #ddd; text-align:right;\">Unit.</th>\n        <th style=\"padding:8px; border:1px solid #ddd; text-align:right;\">Total</th>\n      </tr>\n    </thead>\n    <tbody>\n      ${(quote.items||[]).map(i => `\n        <tr>\n          <td style=\"padding:8px; border:1px solid #ddd;\">${i.product_name}</td>\n          <td style=\"padding:8px; border:1px solid #ddd; text-align:center;\">${i.quantity}</td>\n          <td style=\"padding:8px; border:1px solid #ddd; text-align:right;\">${money(i.unit_price)}</td>\n          <td style=\"padding:8px; border:1px solid #ddd; text-align:right;\"><strong>${money(i.total)}</strong></td>\n        </tr>`).join('')}\n    </tbody>\n  </table>\n  ${settings.custom_message ? `<div style=\"background:#e8f4f8; padding:12px; border-radius:6px; margin:16px 0;\"><strong>💬 Mensagem:</strong><br/>${settings.custom_message}</div>` : ''}\n  <div style=\"color:#6b7280; font-size:12px; text-align:center; margin-top:16px;\"><em>Enviado automaticamente via QuoteMaster Pro</em></div>\n</div>`;\n\nreturn { to: supplier.email, subject: `📋 Nova Cotação: ${quote.title} (ID: ${quote.id})`, html };"
      },
      "id": "prepare-email",
      "name": "Preparar E-mail",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1100, 180]
    },
    {
      "parameters": {
        "fromEmail": "noreply@quotemaster.pro",
        "toEmail": "={{ $json.to }}",
        "subject": "={{ $json.subject }}",
        "emailFormat": "html",
        "html": "={{ $json.html }}"
      },
      "id": "send-email",
      "name": "Enviar E-mail",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [1340, 180]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.settings.send_whatsapp }}",
              "value2": true
            }
          ]
        }
      },
      "id": "if-whatsapp",
      "name": "Enviar WhatsApp?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [860, 420]
    },
    {
      "parameters": {
        "functionCode": "// Log para debug\nconsole.log('Dados recebidos:', JSON.stringify($json, null, 2));\n\nconst { quote: inQuote, client: inClient, supplier, settings } = $json;\n\n// Validação básica\nif (!inQuote || !inClient || !supplier) {\n  console.error('Dados obrigatórios faltando:', { quote: !!inQuote, client: !!inClient, supplier: !!supplier });\n  return [];\n}\n\n// Garantir quote e itens\nconst quote = inQuote || {};\nconst fallbackItems = Array.isArray(quote.items) ? quote.items :\n  Array.isArray($json.items) ? $json.items :\n  Array.isArray($json.quote_items) ? $json.quote_items :\n  Array.isArray($json.template_data?.items) ? $json.template_data.items : [];\n\n// Helpers\nconst money = (v) => {\n  try { return new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' }).format(Number(v || 0)); }\n  catch { return `R$ ${(Number(v || 0)).toFixed(2)}`; }\n};\nconst dateBr = (d) => d ? new Date(d).toLocaleString('pt-BR') : 'A definir';\n\n// Normaliza itens\nconst items = fallbackItems.map((i) => {\n  const qty = Number(i.quantity || 0);\n  const unit = Number(i.unit_price || 0);\n  const total = Number(i.total != null ? i.total : unit * qty);\n  return {\n    product_name: i.product_name || i.name || 'Produto não especificado',\n    quantity: qty,\n    unit_price: unit,\n    total\n  };\n});\nconst itens = items.map(i => `• ${i.product_name} - Qtd: ${i.quantity} - Valor: ${money(i.total)}`).join('\\n');\nconst itemsText = items.length > 0 ? `📦 Itens:\\n${itens}\\n` : '📦 Itens: Consulte detalhes na cotação\\n';\n\n// Template e variáveis\nconst tplMessage = $json.template_data?.message || null;\nconst tplVars = { ...($json.template_data?.variables || {}) };\n\nconst autoVars = {\n  client_name: inClient.name || 'Cliente',\n  client_email: inClient.email || '—',\n  client_phone: inClient.phone || '',\n  supplier_name: supplier.name || 'Fornecedor',\n  quote_title: quote.title || 'Cotação',\n  quote_id: quote.id || '',\n  deadline_formatted: dateBr(quote.deadline),\n  total_formatted: money(quote.total || items.reduce((s,i)=>s+i.total,0)),\n  items_list: itens || '',\n  items_count: String(items.length || 0),\n};\n\nconst context = { client: inClient, supplier, quote, items, ...autoVars, ...tplVars };\nconst getVal = (path) => {\n  try { return path.split('.').reduce((acc, k) => (acc && acc[k] != null ? acc[k] : ''), context); } catch { return ''; }\n};\nconst render = (src) => {\n  if (!src) return '';\n  return String(src).replace(/{{\\s*([^}]+)\\s*}}/g, (_, key) => {\n    const k = key.trim();\n    if (Object.prototype.hasOwnProperty.call(context, k)) return context[k];\n    const v = getVal(k);\n    return (v != null && v !== undefined) ? v : '';\n  });\n};\n\nlet finalMessage = '';\nif (tplMessage) {\n  finalMessage = render(tplMessage);\n} else {\n  // Fallback se não houver template\n  finalMessage = [\n    `🔔 Nova Cotação Disponível`,\n    ``,\n    `👋 Olá, ${context.supplier_name}!`,\n    ``,\n    `📋 ${context.quote_title}`,\n    quote.description ? quote.description : '',\n    `💰 Total Estimado: ${context.total_formatted}`,\n    `📅 Prazo: ${context.deadline_formatted}`,\n    ``,\n    itemsText\n  ].filter(Boolean).join('\\n');\n}\n\n// Apêndice opcional do cliente\nif (settings?.custom_message) {\n  finalMessage += `\\n\\n${render(settings.custom_message)}`;\n}\n\n// Rodapé\nfinalMessage += '\\n\\n—\\nCotação enviada via QuoteMaster Pro';\n\nconsole.log('Mensagem final preparada:', finalMessage.substring(0, 200) + '...');\n\nreturn {\n  phone: supplier.whatsapp || supplier.phone,\n  text: finalMessage,\n  evolution: settings?.evolution || null\n};"
      }
      "id": "prepare-whatsapp",
      "name": "Preparar WhatsApp",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1100, 420]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "={{ $json.evolution && $json.evolution.api_url && $json.evolution.instance ? $json.evolution.api_url + '/message/sendText/' + $json.evolution.instance : 'https://example.invalid/send' }}",
        "jsonParameters": true,
        "options": {
          "headers": {
            "apikey": "={{ $json.evolution && $json.evolution.token ? $json.evolution.token : '' }}",
            "Content-Type": "application/json"
          }
        },
        "sendBody": true,
        "bodyParametersJson": "={{ ({ number: String($json.phone || '').replace(/[^0-9]+/g, ''), text: String($json.text || '') }) }}"
      },
      "id": "send-whatsapp",
      "name": "Enviar WhatsApp (Evolution)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1340, 420]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={ \n  \"success\": true, \n  \"message\": \"Cotações processadas\", \n  \"processed_suppliers\": {{ $items().length }},\n  \"timestamp\": \"{{ new Date().toISOString() }}\" \n}"
      },
      "id": "respond",
      "name": "Responder",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1580, 300]
    }
  ],
  "connections": {
    "Webhook Cotações": {
      "main": [
        [
          {
            "node": "Normalizar Entrada",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalizar Entrada": {
      "main": [
        [
          {
            "node": "Expandir Fornecedores",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Expandir Fornecedores": {
      "main": [
        [
          {
            "node": "Enviar E-mail?",
            "type": "main",
            "index": 0
          },
          {
            "node": "Enviar WhatsApp?",
            "type": "main",
            "index": 0
          },
          {
            "node": "Responder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enviar E-mail?": {
      "main": [
        [
          {
            "node": "Preparar E-mail",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Preparar E-mail": {
      "main": [
        [
          {
            "node": "Enviar E-mail",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enviar WhatsApp?": {
      "main": [
        [
          {
            "node": "Preparar WhatsApp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Preparar WhatsApp": {
      "main": [
        [
          {
            "node": "Enviar WhatsApp (Evolution)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    { "id": "qmp", "name": "QuoteMaster Pro" }
  ],
  "triggerCount": 1,
  "versionId": "2"
}
